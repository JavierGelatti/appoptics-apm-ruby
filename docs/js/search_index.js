var search_data = {"index":{"searchIndex":["appopticsapm","api","layerinit","logging","memcache","profiling","tracing","util","backtrace()","blacklisted?()","force_trace()","get_class_name()","log()","log_end()","log_entry()","log_exception()","log_exit()","log_info()","log_multi_exit()","log_start()","memcache_hit?()","pps()","profile()","profile_method()","remote_host()","start_trace()","start_trace_with_target()","trace()","trim_backtrace()","valid_key?()","xtrace_v2?()"],"longSearchIndex":["appopticsapm","appopticsapm::api","appopticsapm::api::layerinit","appopticsapm::api::logging","appopticsapm::api::memcache","appopticsapm::api::profiling","appopticsapm::api::tracing","appopticsapm::api::util","appopticsapm::api::util#backtrace()","appopticsapm::api::util#blacklisted?()","appopticsapm::api::layerinit#force_trace()","appopticsapm::api::util#get_class_name()","appopticsapm::api::logging#log()","appopticsapm::api::logging#log_end()","appopticsapm::api::logging#log_entry()","appopticsapm::api::logging#log_exception()","appopticsapm::api::logging#log_exit()","appopticsapm::api::logging#log_info()","appopticsapm::api::logging#log_multi_exit()","appopticsapm::api::logging#log_start()","appopticsapm::api::memcache#memcache_hit?()","appopticsapm::api::util#pps()","appopticsapm::api::profiling#profile()","appopticsapm::api::profiling#profile_method()","appopticsapm::api::memcache#remote_host()","appopticsapm::api::tracing#start_trace()","appopticsapm::api::tracing#start_trace_with_target()","appopticsapm::api::tracing#trace()","appopticsapm::api::util#trim_backtrace()","appopticsapm::api::util#valid_key?()","appopticsapm::api::util#xtrace_v2?()"],"info":[["AppOpticsAPM","","AppOpticsAPM.html","",""],["AppOpticsAPM::API","","AppOpticsAPM/API.html","",""],["AppOpticsAPM::API::LayerInit","","AppOpticsAPM/API/LayerInit.html","","<p>Provides methods related to layer initialization and reporting\n"],["AppOpticsAPM::API::Logging","","AppOpticsAPM/API/Logging.html","","<p>This modules provides the X-Trace logging facilities.\n<p>These are the lower level methods, please see AppOpticsAPM::API::Tracing …\n"],["AppOpticsAPM::API::Memcache","","AppOpticsAPM/API/Memcache.html","","<p>Utility methods for the Memcache instrumentation\n"],["AppOpticsAPM::API::Profiling","","AppOpticsAPM/API/Profiling.html","","<p>Module that provides profiling of arbitrary blocks of code\n"],["AppOpticsAPM::API::Tracing","","AppOpticsAPM/API/Tracing.html","","<p>Provides the higher-level tracing interface for the API.\n<p>Traces are best created with a <code>AppOpticsAPM:API.start_trace</code> …\n"],["AppOpticsAPM::API::Util","","AppOpticsAPM/API/Util.html","","<p>General utility methods for the gem\n"],["backtrace","AppOpticsAPM::API::Util","AppOpticsAPM/API/Util.html#method-i-backtrace","(ignore = 0)","<p>Internal: Get the current backtrace.\n<p>ignore - Number of frames to ignore at the top of the backtrace. …\n"],["blacklisted?","AppOpticsAPM::API::Util","AppOpticsAPM/API/Util.html#method-i-blacklisted-3F","(addr_port)","<p>Internal: Check if a host is blacklisted from tracing\n<p>addr_port - the addr_port from Net::HTTP although …\n"],["force_trace","AppOpticsAPM::API::LayerInit","AppOpticsAPM/API/LayerInit.html#method-i-force_trace","()","<p>force_trace has been deprecated and will be removed in a subsequent\nversion.\n"],["get_class_name","AppOpticsAPM::API::Util","AppOpticsAPM/API/Util.html#method-i-get_class_name","(klass)","<p>Internal: Determine a string to report representing klass\n<p>args - an instance of a Class, a Class or a …\n"],["log","AppOpticsAPM::API::Logging","AppOpticsAPM/API/Logging.html#method-i-log","(layer, label, opts = {}, event=nil)","<p>Public: Report an event in an active trace.\n<p>Arguments\n<p><code>layer</code> - The layer the reported event belongs to\n"],["log_end","AppOpticsAPM::API::Logging","AppOpticsAPM/API/Logging.html#method-i-log_end","(layer, opts = {})","<p>Public: Report an exit event and potentially clear the tracing context.\n<p>Attributes\n<p><code>layer</code> - The layer the …\n"],["log_entry","AppOpticsAPM::API::Logging","AppOpticsAPM/API/Logging.html#method-i-log_entry","(layer, opts = {}, op = nil)","<p>Public: Log an entry event\n<p>A helper method to create and log an entry event\n<p>Attributes\n"],["log_exception","AppOpticsAPM::API::Logging","AppOpticsAPM/API/Logging.html#method-i-log_exception","(layer, exn, opts = {})","<p>Public: Report an exception.\n<p>Arguments\n<p><code>layer</code> - The layer the reported event belongs to\n"],["log_exit","AppOpticsAPM::API::Logging","AppOpticsAPM/API/Logging.html#method-i-log_exit","(layer, opts = {}, _op = nil)","<p>Public: Log an exit event\n<p>A helper method to create and log an exit event\n<p>Attributes\n"],["log_info","AppOpticsAPM::API::Logging","AppOpticsAPM/API/Logging.html#method-i-log_info","(layer, kvs = {})","<p>Public: Log an info event\n<p>A helper method to create and log an info event\n<p>Attributes\n"],["log_multi_exit","AppOpticsAPM::API::Logging","AppOpticsAPM/API/Logging.html#method-i-log_multi_exit","(layer, traces)","<p>Public: Log an exit event from multiple requests\n<p>A helper method to create and log an info event If we …\n"],["log_start","AppOpticsAPM::API::Logging","AppOpticsAPM/API/Logging.html#method-i-log_start","(layer, xtrace = nil, opts = {})","<p>Public: Decide whether or not to start a trace, and report an entry event\nappropriately.\n<p>Attributes\n<p><code>layer</code> …\n"],["memcache_hit?","AppOpticsAPM::API::Memcache","AppOpticsAPM/API/Memcache.html#method-i-memcache_hit-3F","(result)",""],["pps","AppOpticsAPM::API::Util","AppOpticsAPM/API/Util.html#method-i-pps","(*args)","<p>Internal: Pretty print a list of arguments for reporting\n<p>args - the list of arguments to work on\n<p>Returns …\n"],["profile","AppOpticsAPM::API::Profiling","AppOpticsAPM/API/Profiling.html#method-i-profile","(profile_name, report_kvs = {}, with_backtrace = false)","<p>Public: Profile a given block of code. Detect any exceptions thrown by the\nblock and report errors.\n<p>profile_name …\n"],["profile_method","AppOpticsAPM::API::Profiling","AppOpticsAPM/API/Profiling.html#method-i-profile_method","(klass, method, opts = {}, extra_kvs = {})","<p>Public: Profile a method on a class or module.  That method can be of any\n(accessible) type (instance, …\n"],["remote_host","AppOpticsAPM::API::Memcache","AppOpticsAPM/API/Memcache.html#method-i-remote_host","(key)",""],["start_trace","AppOpticsAPM::API::Tracing","AppOpticsAPM/API/Tracing.html#method-i-start_trace","(layer, xtrace = nil, opts = {})","<p>Public: Trace a given block of code which can start a trace depending on\nconfiguration and probability. …\n"],["start_trace_with_target","AppOpticsAPM::API::Tracing","AppOpticsAPM/API/Tracing.html#method-i-start_trace_with_target","(layer, xtrace, target, opts = {})","<p>Public: Trace a given block of code which can start a trace depending on\nconfiguration and probability. …\n"],["trace","AppOpticsAPM::API::Tracing","AppOpticsAPM/API/Tracing.html#method-i-trace","(layer, opts = {}, protect_op = nil)","<p>Public: Trace a given block of code. Detect any exceptions thrown by the\nblock and report errors.\n<p><code>:layer</code> …\n"],["trim_backtrace","AppOpticsAPM::API::Util","AppOpticsAPM/API/Util.html#method-i-trim_backtrace","(backtrace)","<p>Internal: Trim a backtrace to a manageable size\n<p>backtrace - the backtrace (an array of stack frames/from …\n"],["valid_key?","AppOpticsAPM::API::Util","AppOpticsAPM/API/Util.html#method-i-valid_key-3F","(key)","<p>Internal: Check whether the provided key is reserved or not. Reserved keys\nare either keys that are handled …\n"],["xtrace_v2?","AppOpticsAPM::API::Util","AppOpticsAPM/API/Util.html#method-i-xtrace_v2-3F","(xtr)",""]]}}