syntax = "proto3";

// Process with:
// bundle exec grpc_tools_ruby_protoc test/servers/grpc/grpc.proto --ruby_out . --grpc_out .

package grpctest;

service TestService {
    // unary
    rpc unary (Address) returns (AddressId);
    rpc unary_cancel(NullMessage) returns(NullMessage);
    rpc unary_long(NullMessage) returns(NullMessage);
    rpc unary_unknown (AddressId) returns (Address);
    rpc unary_unimplemented(NullMessage) returns(NullMessage);

    // client streaming
    rpc client_stream(stream Phone) returns (NullMessage);
    rpc client_stream_cancel(stream Phone) returns (NullMessage);
    rpc client_stream_long(stream Phone) returns (NullMessage);
    rpc client_stream_unknown(stream AddressId) returns (Address);
    rpc client_stream_unimplemented(stream Phone) returns (NullMessage);

    // server streaming
    rpc server_stream (AddressId)  returns (stream Phone);
    rpc server_stream_cancel(NullMessage) returns(stream Phone);
    rpc server_stream_long (AddressId) returns (stream Phone);
    rpc server_stream_unknown(AddressId) returns (stream Address);
    rpc server_stream_unimplemented(NullMessage) returns(stream Phone);

    // bidi streaming
    rpc bidi_stream(stream Phone) returns (stream Phone);
    rpc bidi_stream_cancel(stream Phone) returns (stream Phone);
    rpc bidi_stream_long(stream Phone) returns (stream Phone);
    rpc bidi_stream_unknown(stream Phone) returns (stream Phone);
    rpc bidi_stream_unimplemented(stream Phone) returns (stream Phone);
    rpc bidi_stream_varying(stream Phone) returns (stream Phone);
}

message NullMessage {}

message Phone {
    string number = 1;
    string type = 2;
}

message AddressId {
    int32 id = 1;
}

message Address {
    AddressId id = 5;
    string street = 1;
    int32 number = 2;
    string town = 3;
    repeated Phone phonenumbers = 4;
}
