q
c
q
self.class
self.methods
self.singleton_methods
self.singleton_class.extend AppOpticsAPM::SDK
self.singleton_methods
self.singleton_class.include AppOpticsAPM::SDK
self.singleton_class
self
module AppOpticsAPM; module API < AppOpticsAPM::SDK; end; end
module AppOpticsAPM; module API << AppOpticsAPM::SDK; end; end
module AppOpticsAPM::API << AppOpticsAPM::SDK; end
module AppOpticsAPM::API < AppOpticsAPM::SDK; end
AppOpticsAPM::API.singleton_class.methods
AppOpticsAPM::API.singleton_class
AppOpticsAPM::API.singleton_methods
set_transaction_name('hello')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
set_transaction_name('sdf')
c
n
start
n
set_transaction_name('sdf')
q
c
AppOpticsAPM::SDK.start_trace('sdf') {}
AppOpticsAPM::API.start_trace('sdf') {}
AppOpticsAPM::SDK.singleton_methods
AppOpticsAPM::API.singleton_methods
AppOpticsAPM::API.singleton_mathos
AppOpticsAPM:API.singleton_methods
q
AppOpticsAPM::API.methods
AppOpticsAPM::API.singleton_methods
AppOpticsAPM::SDK.singleton_methods
q
AppOpticsAPM::SDK.singleton_methods
AppOpticsAPM::API.singleton_methods
q
AppOpticsAPM::API.singleton_methods
q
AppOpticsAPM::API.singleton_methods 
AppOpticsAPM::API.instance_methods 
AppOpticsAPM::API.methods true
AppOpticsAPM::API.methods false
set_transaction_name(kvs[:TransactionName])
start
c
AppOpticsAPM::Context.toString
AppOpticsAPM::Context.isValid
AppOpticsAPM::Context.valid
AppOpticsAPM::Context.valid?
q
event.class
c
where
c
q
n
c
q
n
method
s
trace(span, opts)
trace(span, opts) { yield }
 AppOpticsAPM::Context.isValid 
q
s
n
!AppOpticsAPM.loaded || !AppOpticsAPM.tracing? || (protect_op && AppOpticsAPM.layer_op == protect_op.to_sym)
!AppOpticsAPM.loaded || !AppOpticsAPM.tracing?
c
AppOpticsAPM.layer_op
protect_op
c
AppOpticsAPM.layer_op
protect_op
c
!AppOpticsAPM.loaded || !AppOpticsAPM.tracing? || (protect_op && AppOpticsAPM.layer_op == protect_op.to_sym)
protect_op
c
protect_op
c
protect_op
AppOpticsAPM.layer_op == protect_op.to_sym
AppOpticsAPM.layer_op 
q
exit_evt.class
c
event
c
event
event.class
q
c
n
span
AppOpticsAPM.transaction_name
c
n
AppOpticsAPM.transaction_name
n
set_transaction_name(AppOpticsAPM::Span.createSpan(transaction_name, nil, duration))
transaction_name
c
transaction_name
c
q
set_transation_name(kvs[:TransactionName])
s
kvs[:TransactionName]
c
(Time.now - start)
n
c
n
(Time.now - start)
n
c
(Time.now - start)
n
c
(Time.now - start)
n
(Time.now - start)
c
(Time.now - start)
n
c
(Time.now - start)
n
start
n
c
opts
c
opts
c
opts
c
opts
q
c
opts
c
opts
c
opts
c
@xtrace
c
xtrace
@xtrace
n
@xtrace
q
s
c
AppOpticsAPM.transaction_name
xtrace
n
AppOpticsAPM.transaction_name
result
c
@xtrace
@result
c
n
opts
xtrace
span
c
Sidekiq.redis_info
Sidekiq.configure_server { |config| config.redis = { :password => 'secret_pass' } }
end
  config.redis = { :password => 'secret_pass' }
Sidekiq.configure_server do |config|
Sidekiq.redis_info
Sidekiq.methods(false)
Sidekiq.methods(false))
Sidekiq.methods(true)
Sidekiq.methods
Sidekiq.config
Sidekiq
c
q
opts
n
s
n
s
n
q
opts.any?
opts.nil?
n
label
n
